Day 2: Enabling and Accessing the Kubernetes Dashboard

On Day 1, we installed and configured a high-availability Kubernetes cluster. Today, we will enable the Kubernetes dashboard and expose it using a friendly name. Since we are using MicroK8s, enabling the dashboard is as simple as running the following command:


Step 1: Enable the Dashboard
#microk8s enable dashboard

Now that the dashboard is enabled, you can check the service by running the following command:

#microk8s kubectl get service kubernetes-dashboard -n kube-system

You should see an output similar to this:
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kubernetes-dashboard ClusterIP 10.152.183.152 <none> 443/TCP 30d









Step 2: Accessing the Dashboard
To access the dashboard’s GUI, we will create a new Ingress rule. You can find the rule in the repository in a file named kb-dash-ingress.yaml.

Apply the Ingress rule with this command:
#microk8s kubectl apply -f kb-dash-ingress.yml

We have set the name of our dashboard to kbdash.local in the Ingress rule. Now, we need our DNS server to recognize this name. (The DNS server maps human-friendly names to IP addresses, making it easier to remember names rather than IP addresses.)

To check the IP associated with your dashboard, run:

#microk8s kubectl get svc -n ingress

The output should look like this:
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
ingress LoadBalancer 10.152.183.105 192.168.1.200 80:31461/TCP,443:30680/TCP 31d

From this output, we see that the IP of our Ingress load balancer is 192.168.1.200. There are many ways to set this up. In my case, I chose AdGuard to handle DNS, which I’ve used before. I run AdGuard on a TrueNAS Scale server, but you can also run it on your Kubernetes server. I also updated my router’s DNS to point to AdGuard.








Step 3: Configuring AdGuard
Install AdGuard.
Go to SETTINGS > DNS PROTECTION > DNS FILTER EDITOR and create a new rule.
In my case, the rule looks like this:
192.168.1.200 kbdash.local
Save the rule.
Now, if you open a browser and navigate to https://kbdash.local, you should see the Kubernetes dashboard.

Step 4: Logging into the Dashboard
You need a token to log in. You can generate one by running this command:

#microk8s kubectl create token default






Congratulations!
You now have access to your cluster's Kubernetes dashboard, where you can view available services and participating nodes! If you’ve made it this far, you’ve done an amazing job!





END!